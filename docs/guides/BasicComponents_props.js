import projectConfig from '/react_router_chinese/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "guides/BasicComponents.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "guides/BasicComponents.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6">基础组件<a class="anchor" href="#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6">§</a></h2>\n<p>React Router包含三种类型的组件： 路由组件，路由匹配组件，导航组件。</p>\n<p>在你使用这些组件前，都必须从react-router-dom导入她们。</p>\n<pre class="language-autoit"><code class="language-autoit">import { BrowserRouter<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6">路由组件<a class="anchor" href="#%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>任何一个拥有路由跳转功能都React应用都核心都必须是一个路由组件。对于Web项目来说，react-router-dom提供了&lt; BrowserRouter &gt;和&lt; HashRouter &gt;这两种路由。她们会为你创建一个专业的history对象。通常来说，如果你有一个服务器来响应请求，那就使用&lt; BrowserRouter &gt;。如果你是用静态文件来提供服务，那么就使用 &lt; HashRouter &gt;</p>\n<pre class="language-autoit"><code class="language-autoit">import { BrowserRouter } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>\n    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span><span class="token punctuation">,</span>\n  holder\n<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E7%BB%84%E4%BB%B6">路由匹配组件<a class="anchor" href="#%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>路由匹配组件有两种：&lt; Route &gt;和&lt; Switch &gt;<br>\n路由匹配组件通过比较&lt; Route &gt;的path属性和当前页面地址栏的路径来工作。当一个&lt; Route &gt;匹配成功的时候，她会渲染出对应的内容，当匹配不成功的时候，任何内容都不会被渲染出来。当一个&lt; Route &gt;没有path属性时她对任何路径都会匹配成功。<br>\n你可以在你想要根据浏览器地址来渲染内容的任何地方使用&lt; Route &gt;,但是我们通常会把一组&lt; Route &gt;放在一起。&lt; Switch &gt;就是用来把多个&lt; Route &gt;组合在一起的。<br>\n我们不是必须要用&lt; Switch &gt;把多个&lt; Route &gt;组合在一起，但是这种做法通常是有用的。 &lt; Switch &gt;将迭代其所有子&lt; Route &gt;元素，并仅渲染与当前路径匹配的第一个子元素。 她对于多个path匹配相同的路径、动画路由之间的转换、没有路径匹配时的识别（这样你就可以渲染“404”组件）是有很大帮助的。</p>\n<pre class="language-autoit"><code class="language-autoit">import { Route<span class="token punctuation">,</span> <span class="token keyword">Switch</span> } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\n<span class="token operator">/</span><span class="token operator">/</span> when location <span class="token operator">=</span> { pathname<span class="token punctuation">:</span> <span class="token string">\'/about\'</span> }\n<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">\'/about\'</span> component<span class="token operator">=</span>{About}<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">/</span><span class="token operator">/</span> renders <span class="token operator">&lt;</span>About<span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">\'/contact\'</span> component<span class="token operator">=</span>{Contact}<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">/</span><span class="token operator">/</span> renders <span class="token keyword">null</span>\n<span class="token operator">&lt;</span>Route component<span class="token operator">=</span>{Always}<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">/</span><span class="token operator">/</span> renders <span class="token operator">&lt;</span>Always<span class="token operator">/</span><span class="token operator">></span>\n\n<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span>{Home} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span>{About} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/contact"</span> component<span class="token operator">=</span>{Contact} <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n\n<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span>{Home} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span>{About} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/contact"</span> component<span class="token operator">=</span>{Contact} <span class="token operator">/</span><span class="token operator">></span>\n  {<span class="token operator">/</span><span class="token operator">*</span> when none of the above match<span class="token punctuation">,</span> <span class="token operator">&lt;</span>NoMatch<span class="token operator">></span> will be rendered <span class="token operator">*</span><span class="token operator">/</span>}\n  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span>{NoMatch} <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n</code></pre>\n<h3 id="%E8%B7%AF%E7%94%B1%E6%B8%B2%E6%9F%93%E5%B1%9E%E6%80%A7">路由渲染属性<a class="anchor" href="#%E8%B7%AF%E7%94%B1%E6%B8%B2%E6%9F%93%E5%B1%9E%E6%80%A7">§</a></h3>\n<p>对于一个&lt; Route &gt;组件，你可以设置三种属性：component, render, children 来渲染出相应的内容。在这里我们只关注component和render,因为她们是经常会用到的，更多的内容可以查看&lt; Route &gt;的API文档。</p>\n<p>当你有一个已存在的组件（无论是一个React组件还是一个无状态的函数组件）想要渲染时应该使用component。当你必须传递一些参数变量给组件时应该用render属性，她采用内联函数的形式。你不应该使用component属性来渲染一个带有参数变量的内联函数组件，这会导致不必要的组件的挂载和卸载。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">;</span>\n\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> someVariable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n      {<span class="token operator">/</span><span class="token operator">*</span> these are good <span class="token operator">*</span><span class="token operator">/</span>}\n      <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span>{Home} <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>Route\n        path<span class="token operator">=</span><span class="token string">"/about"</span>\n        render<span class="token operator">=</span>{props <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>About {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>props} extra<span class="token operator">=</span>{someVariable} <span class="token operator">/</span><span class="token operator">></span>}\n      <span class="token operator">/</span><span class="token operator">></span>\n      {<span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">do</span> <span class="token operator">not</span> <span class="token keyword">do</span> this <span class="token operator">*</span><span class="token operator">/</span>}\n      <span class="token operator">&lt;</span>Route\n        path<span class="token operator">=</span><span class="token string">"/contact"</span>\n        component<span class="token operator">=</span>{props <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Contact {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>props} extra<span class="token operator">=</span>{someVariable} <span class="token operator">/</span><span class="token operator">></span>}\n      <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6">导航组件<a class="anchor" href="#%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>React Router 提供了&lt; Link &gt;组件用来在你的应用中创建超链接。&lt; Link &gt;会在页面的任何地方被渲染成&lt; a &gt;标签</p>\n<p>&lt; NavLink &gt;是一种特殊的&lt; Link &gt;组件，当她的to属性匹配地址栏的路径时，她渲染成的&lt; a &gt;标签会带有\'active\'的样式。</p>\n<p>如果你想要强制跳转，你可以使用&lt; Redirect &gt;。当一个&lt; Redirect &gt;组件被渲染时，她会导航到其to属性匹配的路径。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>Link <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'/\'</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n\n<span class="token operator">/</span><span class="token operator">/</span> location <span class="token operator">=</span> { pathname<span class="token punctuation">:</span> <span class="token string">\'/react\'</span> }\n<span class="token operator">&lt;</span>NavLink <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/react"</span> activeClassName<span class="token operator">=</span><span class="token string">"hurray"</span><span class="token operator">></span>\n  React\n<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'/react\'</span> className<span class="token operator">=</span><span class="token string">\'hurray\'</span><span class="token operator">></span>React<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>Redirect <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/login"</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@17.0.2/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@17.0.2/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/react_router_chinese/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6">基础组件<a class="anchor" href="#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6">§</a></h2>\n<p>React Router包含三种类型的组件： 路由组件，路由匹配组件，导航组件。</p>\n<p>在你使用这些组件前，都必须从react-router-dom导入她们。</p>\n<pre class="language-autoit"><code class="language-autoit">import { BrowserRouter<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6">路由组件<a class="anchor" href="#%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>任何一个拥有路由跳转功能都React应用都核心都必须是一个路由组件。对于Web项目来说，react-router-dom提供了&lt; BrowserRouter &gt;和&lt; HashRouter &gt;这两种路由。她们会为你创建一个专业的history对象。通常来说，如果你有一个服务器来响应请求，那就使用&lt; BrowserRouter &gt;。如果你是用静态文件来提供服务，那么就使用 &lt; HashRouter &gt;</p>\n<pre class="language-autoit"><code class="language-autoit">import { BrowserRouter } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>\n    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span><span class="token punctuation">,</span>\n  holder\n<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E7%BB%84%E4%BB%B6">路由匹配组件<a class="anchor" href="#%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>路由匹配组件有两种：&lt; Route &gt;和&lt; Switch &gt;<br>\n路由匹配组件通过比较&lt; Route &gt;的path属性和当前页面地址栏的路径来工作。当一个&lt; Route &gt;匹配成功的时候，她会渲染出对应的内容，当匹配不成功的时候，任何内容都不会被渲染出来。当一个&lt; Route &gt;没有path属性时她对任何路径都会匹配成功。<br>\n你可以在你想要根据浏览器地址来渲染内容的任何地方使用&lt; Route &gt;,但是我们通常会把一组&lt; Route &gt;放在一起。&lt; Switch &gt;就是用来把多个&lt; Route &gt;组合在一起的。<br>\n我们不是必须要用&lt; Switch &gt;把多个&lt; Route &gt;组合在一起，但是这种做法通常是有用的。 &lt; Switch &gt;将迭代其所有子&lt; Route &gt;元素，并仅渲染与当前路径匹配的第一个子元素。 她对于多个path匹配相同的路径、动画路由之间的转换、没有路径匹配时的识别（这样你就可以渲染“404”组件）是有很大帮助的。</p>\n<pre class="language-autoit"><code class="language-autoit">import { Route<span class="token punctuation">,</span> <span class="token keyword">Switch</span> } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\n<span class="token operator">/</span><span class="token operator">/</span> when location <span class="token operator">=</span> { pathname<span class="token punctuation">:</span> <span class="token string">\'/about\'</span> }\n<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">\'/about\'</span> component<span class="token operator">=</span>{About}<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">/</span><span class="token operator">/</span> renders <span class="token operator">&lt;</span>About<span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">\'/contact\'</span> component<span class="token operator">=</span>{Contact}<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">/</span><span class="token operator">/</span> renders <span class="token keyword">null</span>\n<span class="token operator">&lt;</span>Route component<span class="token operator">=</span>{Always}<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">/</span><span class="token operator">/</span> renders <span class="token operator">&lt;</span>Always<span class="token operator">/</span><span class="token operator">></span>\n\n<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span>{Home} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span>{About} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/contact"</span> component<span class="token operator">=</span>{Contact} <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n\n<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span>{Home} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span>{About} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/contact"</span> component<span class="token operator">=</span>{Contact} <span class="token operator">/</span><span class="token operator">></span>\n  {<span class="token operator">/</span><span class="token operator">*</span> when none of the above match<span class="token punctuation">,</span> <span class="token operator">&lt;</span>NoMatch<span class="token operator">></span> will be rendered <span class="token operator">*</span><span class="token operator">/</span>}\n  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span>{NoMatch} <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n</code></pre>\n<h3 id="%E8%B7%AF%E7%94%B1%E6%B8%B2%E6%9F%93%E5%B1%9E%E6%80%A7">路由渲染属性<a class="anchor" href="#%E8%B7%AF%E7%94%B1%E6%B8%B2%E6%9F%93%E5%B1%9E%E6%80%A7">§</a></h3>\n<p>对于一个&lt; Route &gt;组件，你可以设置三种属性：component, render, children 来渲染出相应的内容。在这里我们只关注component和render,因为她们是经常会用到的，更多的内容可以查看&lt; Route &gt;的API文档。</p>\n<p>当你有一个已存在的组件（无论是一个React组件还是一个无状态的函数组件）想要渲染时应该使用component。当你必须传递一些参数变量给组件时应该用render属性，她采用内联函数的形式。你不应该使用component属性来渲染一个带有参数变量的内联函数组件，这会导致不必要的组件的挂载和卸载。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">;</span>\n\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> someVariable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n      {<span class="token operator">/</span><span class="token operator">*</span> these are good <span class="token operator">*</span><span class="token operator">/</span>}\n      <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span>{Home} <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>Route\n        path<span class="token operator">=</span><span class="token string">"/about"</span>\n        render<span class="token operator">=</span>{props <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>About {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>props} extra<span class="token operator">=</span>{someVariable} <span class="token operator">/</span><span class="token operator">></span>}\n      <span class="token operator">/</span><span class="token operator">></span>\n      {<span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">do</span> <span class="token operator">not</span> <span class="token keyword">do</span> this <span class="token operator">*</span><span class="token operator">/</span>}\n      <span class="token operator">&lt;</span>Route\n        path<span class="token operator">=</span><span class="token string">"/contact"</span>\n        component<span class="token operator">=</span>{props <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Contact {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>props} extra<span class="token operator">=</span>{someVariable} <span class="token operator">/</span><span class="token operator">></span>}\n      <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6">导航组件<a class="anchor" href="#%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>React Router 提供了&lt; Link &gt;组件用来在你的应用中创建超链接。&lt; Link &gt;会在页面的任何地方被渲染成&lt; a &gt;标签</p>\n<p>&lt; NavLink &gt;是一种特殊的&lt; Link &gt;组件，当她的to属性匹配地址栏的路径时，她渲染成的&lt; a &gt;标签会带有\'active\'的样式。</p>\n<p>如果你想要强制跳转，你可以使用&lt; Redirect &gt;。当一个&lt; Redirect &gt;组件被渲染时，她会导航到其to属性匹配的路径。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>Link <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'/\'</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n\n<span class="token operator">/</span><span class="token operator">/</span> location <span class="token operator">=</span> { pathname<span class="token punctuation">:</span> <span class="token string">\'/react\'</span> }\n<span class="token operator">&lt;</span>NavLink <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/react"</span> activeClassName<span class="token operator">=</span><span class="token string">"hurray"</span><span class="token operator">></span>\n  React\n<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'/react\'</span> className<span class="token operator">=</span><span class="token string">\'hurray\'</span><span class="token operator">></span>React<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>Redirect <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/login"</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6" }, "\u57FA\u7840\u7EC4\u4EF6"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6" }, "\u8DEF\u7531\u7EC4\u4EF6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E7%BB%84%E4%BB%B6" }, "\u8DEF\u7531\u5339\u914D\u7EC4\u4EF6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%B7%AF%E7%94%B1%E6%B8%B2%E6%9F%93%E5%B1%9E%E6%80%A7" }, "\u8DEF\u7531\u6E32\u67D3\u5C5E\u6027")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6" }, "\u5BFC\u822A\u7EC4\u4EF6")))))),
    'author': undefined,
    'contributors': [],
    'date': "2021-10-28T10:02:43.660Z",
    'updated': null,
    'excerpt': "基础组件 React Router包含三种类型的组件： 路由组件，路由匹配组件，导航组件。 在你使用这些组件前，都必须从react-router-dom导入她们。 import { BrowserRouter, Route, Link } from \"react-router-dom\"; 路由组件 任何一...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "文档",
            "link": "guides/QuickStart.html",
            "children": [
                {
                    "text": "快速开始",
                    "link": "guides/QuickStart.html",
                    "pagePath": "guides/QuickStart.md"
                },
                {
                    "text": "基础组件",
                    "link": "guides/BasicComponents.html",
                    "pagePath": "guides/BasicComponents.md"
                },
                {
                    "text": "服务端渲染",
                    "link": "guides/ServerRendering.html",
                    "pagePath": "guides/ServerRendering.md"
                },
                {
                    "text": "代码拆分",
                    "link": "guides/CodeSplitting.html",
                    "pagePath": "guides/CodeSplitting.md"
                },
                {
                    "text": "滚动恢复",
                    "link": "guides/ScrollRestoration.html",
                    "pagePath": "guides/ScrollRestoration.md"
                },
                {
                    "text": "设计思想",
                    "link": "guides/Philosophy.html",
                    "pagePath": "guides/Philosophy.md"
                },
                {
                    "text": "测试",
                    "link": "guides/Testting.html",
                    "pagePath": "guides/Testting.md"
                },
                {
                    "text": "集成 Redux",
                    "link": "guides/ReduxIntegration.html",
                    "pagePath": "guides/ReduxIntegration.md"
                },
                {
                    "text": "静态路由",
                    "link": "guides/StaticRouter.html",
                    "pagePath": "guides/StaticRouter.md"
                }
            ],
            "pagePath": "guides/QuickStart.md"
        },
        {
            "text": "API",
            "link": "API/API.html",
            "pagePath": "API/API.md"
        }
    ]
};
