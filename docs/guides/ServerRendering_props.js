import projectConfig from '/react_router_chinese/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "guides/ServerRendering.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "guides/ServerRendering.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93">服务端渲染<a class="anchor" href="#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93">§</a></h2>\n<p>由于服务端是无状态的，所以服务端渲染和客户端渲染并不相同. 最基本的就是我们封装app时, 使用无状态的 &lt; StaticRouter &gt;来代替&lt; BrowserRouter &gt;, 使用来自于服务端的请求url来匹配路由。接下来我们会讨论 context 属性</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> client\n<span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>\n  <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>\n\n<span class="token operator">/</span><span class="token operator">/</span> server <span class="token punctuation">(</span><span class="token operator">not</span> the complete story<span class="token punctuation">)</span>\n<span class="token operator">&lt;</span>StaticRouter\n  location<span class="token operator">=</span>{req<span class="token punctuation">.</span>url}\n  context<span class="token operator">=</span>{context}\n<span class="token operator">></span>\n  <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n</code></pre>\n<p>当你在客户端渲染 &lt; Redirect &gt;, 浏览器地址栏会改变状态使我们能看到新的页面,然而在一个静态的服务环境下, 我们不能够改变app的状态。代替的是, 我们将渲染的结果赋给context属性. 如果我们找到了 context.url, 那么我们知道这个app重定向了. 这允许我们向服务端发送一个重定向请求</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> context <span class="token operator">=</span> {}\n<span class="token keyword">const</span> markup <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>StaticRouter\n    location<span class="token operator">=</span>{req<span class="token punctuation">.</span>url}\n    context<span class="token operator">=</span>{context}\n  <span class="token operator">></span>\n    <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> Somewhere a `<span class="token operator">&lt;</span>Redirect<span class="token operator">></span>` was rendered\n  <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>url<span class="token punctuation">)</span>\n} <span class="token keyword">else</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> we\'re good<span class="token punctuation">,</span> send the response\n}\n</code></pre>\n<h3 id="%E6%B7%BB%E5%8A%A0%E6%98%8E%E7%A1%AE%E7%9A%84%E5%BA%94%E7%94%A8%E5%86%85%E5%AE%B9%E4%BF%A1%E6%81%AF">添加明确的应用内容信息<a class="anchor" href="#%E6%B7%BB%E5%8A%A0%E6%98%8E%E7%A1%AE%E7%9A%84%E5%BA%94%E7%94%A8%E5%86%85%E5%AE%B9%E4%BF%A1%E6%81%AF">§</a></h3>\n<p>路由只能添加 context.url. 但是你可能想要发送重定向的301或302的响应。或许你在某些特殊的UI渲染后需要发送一个404响应, 又或者在客户端没有认证的情况下发送401。 context属性是属于你的, 所以你可以任意改变她. 下面是分辨301与302重定向的方法。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> RedirectWithStatus <span class="token operator">=</span> <span class="token punctuation">(</span>{ from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> status }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Route render<span class="token operator">=</span>{<span class="token punctuation">(</span>{ staticContext }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    <span class="token operator">/</span><span class="token operator">/</span> there is no `staticContext` on the client<span class="token punctuation">,</span> so\n    <span class="token operator">/</span><span class="token operator">/</span> we need <span class="token keyword">to</span> guard against that here\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>staticContext<span class="token punctuation">)</span>\n      staticContext<span class="token punctuation">.</span>status <span class="token operator">=</span> status\n    return <span class="token operator">&lt;</span>Redirect from<span class="token operator">=</span>{from} <span class="token keyword">to</span><span class="token operator">=</span>{<span class="token keyword">to</span>}<span class="token operator">/</span><span class="token operator">></span>\n  }}<span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> somewhere <span class="token keyword">in</span> your app\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n    {<span class="token operator">/</span><span class="token operator">*</span> some other routes <span class="token operator">*</span><span class="token operator">/</span>}\n    <span class="token operator">&lt;</span>RedirectWithStatus\n      status<span class="token operator">=</span>{<span class="token number">301</span>}\n      from<span class="token operator">=</span><span class="token string">"/users"</span>\n      <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/profiles"</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>RedirectWithStatus\n      status<span class="token operator">=</span>{<span class="token number">302</span>}\n      from<span class="token operator">=</span><span class="token string">"/courses"</span>\n      <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/dashboard"</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> on the server\n<span class="token keyword">const</span> context <span class="token operator">=</span> {}\n\n<span class="token keyword">const</span> markup <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>StaticRouter context<span class="token operator">=</span>{context}<span class="token operator">></span>\n    <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> can use the `context<span class="token punctuation">.</span>status` that\n  <span class="token operator">/</span><span class="token operator">/</span> we added <span class="token keyword">in</span> RedirectWithStatus\n  <span class="token function">redirect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>status<span class="token punctuation">,</span> context<span class="token punctuation">.</span>url<span class="token punctuation">)</span>\n}\n</code></pre>\n<h3 id="404-401-%E6%88%96%E5%85%B6%E4%BB%96%E7%8A%B6%E6%80%81">404, 401, 或其他状态<a class="anchor" href="#404-401-%E6%88%96%E5%85%B6%E4%BB%96%E7%8A%B6%E6%80%81">§</a></h3>\n<p>我们现在可以做到和上面一样的事，创建一个包含想要内容的组件，当收到不同的的状态码时可以在应用的任何地方渲染该组件。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">Status</span><span class="token punctuation">(</span>{ code<span class="token punctuation">,</span> children }<span class="token punctuation">)</span> {\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Route\n      render<span class="token operator">=</span>{<span class="token punctuation">(</span>{ staticContext }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>staticContext<span class="token punctuation">)</span> staticContext<span class="token punctuation">.</span>status <span class="token operator">=</span> code<span class="token comment">;</span>\n        return children<span class="token comment">;</span>\n      }}\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n}\n</code></pre>\n<p>现在，当你想要给静态内容添加一个状态码时，你可以在应用的任何地方渲染一种状态。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Status code<span class="token operator">=</span>{<span class="token number">404</span>}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Sorry<span class="token punctuation">,</span> can’t find that<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Status<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> somewhere <span class="token keyword">else</span>\n<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span>{About} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/dashboard"</span> component<span class="token operator">=</span>{Dashboard} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span>{NotFound} <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E7%BB%84%E5%90%88%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9">组合所有内容<a class="anchor" href="#%E7%BB%84%E5%90%88%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9">§</a></h3>\n<p>虽然这不是一个真正的应用，但是她展现了将所有内容组合在一起所需的常规部分</p>\n<pre class="language-autoit"><code class="language-autoit">import { createServer } from <span class="token string">\'http\'</span>\nimport React from <span class="token string">\'react\'</span>\nimport ReactDOMServer from <span class="token string">\'react-dom/server\'</span>\nimport { StaticRouter } from <span class="token string">\'react-router\'</span>\nimport App from <span class="token string">\'./App\'</span>\n\n<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> context <span class="token operator">=</span> {}\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>StaticRouter\n      location<span class="token operator">=</span>{req<span class="token punctuation">.</span>url}\n      context<span class="token operator">=</span>{context}\n    <span class="token operator">></span>\n      <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> {\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> {\n      Location<span class="token punctuation">:</span> context<span class="token punctuation">.</span>url\n    }<span class="token punctuation">)</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  } <span class="token keyword">else</span> {\n    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>`\n      <span class="token operator">&lt;</span>!doctype html<span class="token operator">></span>\n      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>${html}<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    `<span class="token punctuation">)</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  }\n}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>\n</code></pre>\n<p>然后是客户端</p>\n<pre class="language-autoit"><code class="language-autoit">import ReactDOM from <span class="token string">\'react-dom\'</span>\nimport { BrowserRouter } from <span class="token string">\'react-router-dom\'</span>\nimport App from <span class="token string">\'./App\'</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>\n    <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD">数据加载<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD">§</a></h3>\n<p>要做到这一点有很多不同的方法，对此并没有最佳的实践。所以我们寻求多种方法的不同组合方式，而不是规定或倾向某一种。我们相信React Router可以在你的应用的规则限制下找到一种合理的方式。</p>\n<p>最主要的约束是你希望在页面渲染前加载完数据。React Router暴露了一个matchPath静态函数，你可以用她来进行路由匹配。你可以在服务端用这个函数来确定哪些依赖的数据是要在渲染前完成的。</p>\n<p>这种方法的特点是在进行实际跳转前设定好静态匹配规则，在实际跳转前就已经知道要使用哪些数据。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  { path<span class="token punctuation">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n    component<span class="token punctuation">:</span> Root<span class="token punctuation">,</span>\n    loadData<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getSomeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  }<span class="token punctuation">,</span>\n  <span class="token operator">/</span><span class="token operator">/</span> etc<span class="token punctuation">.</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>然后使用这些规则在应用中渲染你的路由</p>\n<pre class="language-autoit"><code class="language-autoit">import { routes } from <span class="token string">\'./routes\'</span>\n\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n    {routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>Route {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>route}<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>}\n  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p>在服务端你可能会做这些；</p>\n<pre class="language-autoit"><code class="language-autoit">import { matchPath } from <span class="token string">\'react-router-dom\'</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> inside a request\n<span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">/</span><span class="token operator">/</span> use `some` <span class="token keyword">to</span> imitate `<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>` behavior of selecting only\n<span class="token operator">/</span><span class="token operator">/</span> the first <span class="token keyword">to</span> match\nroutes<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token operator">/</span><span class="token operator">/</span> use `matchPath` here\n  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> route<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span>\n    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  return match\n}<span class="token punctuation">)</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">do</span> something w<span class="token operator">/</span> the data so the client\n  <span class="token operator">/</span><span class="token operator">/</span> can access it <span class="token keyword">then</span> render the app\n}<span class="token punctuation">)</span>\n</code></pre>\n<p>最后，客户端需要获取数据。我们并不是给你的应用规定数据加载的模式，但这些是在开发中常用的形式。</p>\n<p>你可能会对我们的进行数据加载和静态路由配置的<a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config">React Router Config</a>包感兴趣。</p>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@17.0.2/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@17.0.2/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/react_router_chinese/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93">服务端渲染<a class="anchor" href="#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93">§</a></h2>\n<p>由于服务端是无状态的，所以服务端渲染和客户端渲染并不相同. 最基本的就是我们封装app时, 使用无状态的 &lt; StaticRouter &gt;来代替&lt; BrowserRouter &gt;, 使用来自于服务端的请求url来匹配路由。接下来我们会讨论 context 属性</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span> client\n<span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>\n  <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>\n\n<span class="token operator">/</span><span class="token operator">/</span> server <span class="token punctuation">(</span><span class="token operator">not</span> the complete story<span class="token punctuation">)</span>\n<span class="token operator">&lt;</span>StaticRouter\n  location<span class="token operator">=</span>{req<span class="token punctuation">.</span>url}\n  context<span class="token operator">=</span>{context}\n<span class="token operator">></span>\n  <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n</code></pre>\n<p>当你在客户端渲染 &lt; Redirect &gt;, 浏览器地址栏会改变状态使我们能看到新的页面,然而在一个静态的服务环境下, 我们不能够改变app的状态。代替的是, 我们将渲染的结果赋给context属性. 如果我们找到了 context.url, 那么我们知道这个app重定向了. 这允许我们向服务端发送一个重定向请求</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> context <span class="token operator">=</span> {}\n<span class="token keyword">const</span> markup <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>StaticRouter\n    location<span class="token operator">=</span>{req<span class="token punctuation">.</span>url}\n    context<span class="token operator">=</span>{context}\n  <span class="token operator">></span>\n    <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> Somewhere a `<span class="token operator">&lt;</span>Redirect<span class="token operator">></span>` was rendered\n  <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>url<span class="token punctuation">)</span>\n} <span class="token keyword">else</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> we\'re good<span class="token punctuation">,</span> send the response\n}\n</code></pre>\n<h3 id="%E6%B7%BB%E5%8A%A0%E6%98%8E%E7%A1%AE%E7%9A%84%E5%BA%94%E7%94%A8%E5%86%85%E5%AE%B9%E4%BF%A1%E6%81%AF">添加明确的应用内容信息<a class="anchor" href="#%E6%B7%BB%E5%8A%A0%E6%98%8E%E7%A1%AE%E7%9A%84%E5%BA%94%E7%94%A8%E5%86%85%E5%AE%B9%E4%BF%A1%E6%81%AF">§</a></h3>\n<p>路由只能添加 context.url. 但是你可能想要发送重定向的301或302的响应。或许你在某些特殊的UI渲染后需要发送一个404响应, 又或者在客户端没有认证的情况下发送401。 context属性是属于你的, 所以你可以任意改变她. 下面是分辨301与302重定向的方法。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> RedirectWithStatus <span class="token operator">=</span> <span class="token punctuation">(</span>{ from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> status }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Route render<span class="token operator">=</span>{<span class="token punctuation">(</span>{ staticContext }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    <span class="token operator">/</span><span class="token operator">/</span> there is no `staticContext` on the client<span class="token punctuation">,</span> so\n    <span class="token operator">/</span><span class="token operator">/</span> we need <span class="token keyword">to</span> guard against that here\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>staticContext<span class="token punctuation">)</span>\n      staticContext<span class="token punctuation">.</span>status <span class="token operator">=</span> status\n    return <span class="token operator">&lt;</span>Redirect from<span class="token operator">=</span>{from} <span class="token keyword">to</span><span class="token operator">=</span>{<span class="token keyword">to</span>}<span class="token operator">/</span><span class="token operator">></span>\n  }}<span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> somewhere <span class="token keyword">in</span> your app\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n    {<span class="token operator">/</span><span class="token operator">*</span> some other routes <span class="token operator">*</span><span class="token operator">/</span>}\n    <span class="token operator">&lt;</span>RedirectWithStatus\n      status<span class="token operator">=</span>{<span class="token number">301</span>}\n      from<span class="token operator">=</span><span class="token string">"/users"</span>\n      <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/profiles"</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>RedirectWithStatus\n      status<span class="token operator">=</span>{<span class="token number">302</span>}\n      from<span class="token operator">=</span><span class="token string">"/courses"</span>\n      <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/dashboard"</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> on the server\n<span class="token keyword">const</span> context <span class="token operator">=</span> {}\n\n<span class="token keyword">const</span> markup <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>StaticRouter context<span class="token operator">=</span>{context}<span class="token operator">></span>\n    <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> {\n  <span class="token operator">/</span><span class="token operator">/</span> can use the `context<span class="token punctuation">.</span>status` that\n  <span class="token operator">/</span><span class="token operator">/</span> we added <span class="token keyword">in</span> RedirectWithStatus\n  <span class="token function">redirect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>status<span class="token punctuation">,</span> context<span class="token punctuation">.</span>url<span class="token punctuation">)</span>\n}\n</code></pre>\n<h3 id="404-401-%E6%88%96%E5%85%B6%E4%BB%96%E7%8A%B6%E6%80%81">404, 401, 或其他状态<a class="anchor" href="#404-401-%E6%88%96%E5%85%B6%E4%BB%96%E7%8A%B6%E6%80%81">§</a></h3>\n<p>我们现在可以做到和上面一样的事，创建一个包含想要内容的组件，当收到不同的的状态码时可以在应用的任何地方渲染该组件。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">Status</span><span class="token punctuation">(</span>{ code<span class="token punctuation">,</span> children }<span class="token punctuation">)</span> {\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Route\n      render<span class="token operator">=</span>{<span class="token punctuation">(</span>{ staticContext }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>staticContext<span class="token punctuation">)</span> staticContext<span class="token punctuation">.</span>status <span class="token operator">=</span> code<span class="token comment">;</span>\n        return children<span class="token comment">;</span>\n      }}\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n}\n</code></pre>\n<p>现在，当你想要给静态内容添加一个状态码时，你可以在应用的任何地方渲染一种状态。</p>\n<pre class="language-autoit"><code class="language-autoit">function <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Status code<span class="token operator">=</span>{<span class="token number">404</span>}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Sorry<span class="token punctuation">,</span> can’t find that<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Status<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> somewhere <span class="token keyword">else</span>\n<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span>{About} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/dashboard"</span> component<span class="token operator">=</span>{Dashboard} <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span>{NotFound} <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E7%BB%84%E5%90%88%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9">组合所有内容<a class="anchor" href="#%E7%BB%84%E5%90%88%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9">§</a></h3>\n<p>虽然这不是一个真正的应用，但是她展现了将所有内容组合在一起所需的常规部分</p>\n<pre class="language-autoit"><code class="language-autoit">import { createServer } from <span class="token string">\'http\'</span>\nimport React from <span class="token string">\'react\'</span>\nimport ReactDOMServer from <span class="token string">\'react-dom/server\'</span>\nimport { StaticRouter } from <span class="token string">\'react-router\'</span>\nimport App from <span class="token string">\'./App\'</span>\n\n<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> context <span class="token operator">=</span> {}\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>StaticRouter\n      location<span class="token operator">=</span>{req<span class="token punctuation">.</span>url}\n      context<span class="token operator">=</span>{context}\n    <span class="token operator">></span>\n      <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">></span>\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> {\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> {\n      Location<span class="token punctuation">:</span> context<span class="token punctuation">.</span>url\n    }<span class="token punctuation">)</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  } <span class="token keyword">else</span> {\n    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>`\n      <span class="token operator">&lt;</span>!doctype html<span class="token operator">></span>\n      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>${html}<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    `<span class="token punctuation">)</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  }\n}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>\n</code></pre>\n<p>然后是客户端</p>\n<pre class="language-autoit"><code class="language-autoit">import ReactDOM from <span class="token string">\'react-dom\'</span>\nimport { BrowserRouter } from <span class="token string">\'react-router-dom\'</span>\nimport App from <span class="token string">\'./App\'</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>\n    <span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD">数据加载<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD">§</a></h3>\n<p>要做到这一点有很多不同的方法，对此并没有最佳的实践。所以我们寻求多种方法的不同组合方式，而不是规定或倾向某一种。我们相信React Router可以在你的应用的规则限制下找到一种合理的方式。</p>\n<p>最主要的约束是你希望在页面渲染前加载完数据。React Router暴露了一个matchPath静态函数，你可以用她来进行路由匹配。你可以在服务端用这个函数来确定哪些依赖的数据是要在渲染前完成的。</p>\n<p>这种方法的特点是在进行实际跳转前设定好静态匹配规则，在实际跳转前就已经知道要使用哪些数据。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  { path<span class="token punctuation">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n    component<span class="token punctuation">:</span> Root<span class="token punctuation">,</span>\n    loadData<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getSomeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  }<span class="token punctuation">,</span>\n  <span class="token operator">/</span><span class="token operator">/</span> etc<span class="token punctuation">.</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>然后使用这些规则在应用中渲染你的路由</p>\n<pre class="language-autoit"><code class="language-autoit">import { routes } from <span class="token string">\'./routes\'</span>\n\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>\n    {routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>Route {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>route}<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>}\n  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">Switch</span><span class="token operator">></span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p>在服务端你可能会做这些；</p>\n<pre class="language-autoit"><code class="language-autoit">import { matchPath } from <span class="token string">\'react-router-dom\'</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> inside a request\n<span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">/</span><span class="token operator">/</span> use `some` <span class="token keyword">to</span> imitate `<span class="token operator">&lt;</span><span class="token keyword">Switch</span><span class="token operator">></span>` behavior of selecting only\n<span class="token operator">/</span><span class="token operator">/</span> the first <span class="token keyword">to</span> match\nroutes<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token operator">/</span><span class="token operator">/</span> use `matchPath` here\n  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> route<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span>\n    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  return match\n}<span class="token punctuation">)</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">do</span> something w<span class="token operator">/</span> the data so the client\n  <span class="token operator">/</span><span class="token operator">/</span> can access it <span class="token keyword">then</span> render the app\n}<span class="token punctuation">)</span>\n</code></pre>\n<p>最后，客户端需要获取数据。我们并不是给你的应用规定数据加载的模式，但这些是在开发中常用的形式。</p>\n<p>你可能会对我们的进行数据加载和静态路由配置的<a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config">React Router Config</a>包感兴趣。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93" }, "\u670D\u52A1\u7AEF\u6E32\u67D3"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%B7%BB%E5%8A%A0%E6%98%8E%E7%A1%AE%E7%9A%84%E5%BA%94%E7%94%A8%E5%86%85%E5%AE%B9%E4%BF%A1%E6%81%AF" }, "\u6DFB\u52A0\u660E\u786E\u7684\u5E94\u7528\u5185\u5BB9\u4FE1\u606F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#404-401-%E6%88%96%E5%85%B6%E4%BB%96%E7%8A%B6%E6%80%81" }, "404, 401, \u6216\u5176\u4ED6\u72B6\u6001")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%BB%84%E5%90%88%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9" }, "\u7EC4\u5408\u6240\u6709\u5185\u5BB9")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD" }, "\u6570\u636E\u52A0\u8F7D")))))),
    'author': "Kanzaki-H-Aria",
    'contributors': [
        "Kanzaki-H-Aria",
        "frisktale"
    ],
    'date': "2019-05-31T09:25:04.000Z",
    'updated': "2021-10-28T10:09:03.000Z",
    'excerpt': "服务端渲染 由于服务端是无状态的，所以服务端渲染和客户端渲染并不相同. 最基本的就是我们封装app时, 使用无状态的 < StaticRouter >来代替< BrowserRouter >, 使用来自于服务端的请求url来匹配路由。接下来我们会讨论 contex...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "文档",
            "link": "guides/QuickStart.html",
            "children": [
                {
                    "text": "快速开始",
                    "link": "guides/QuickStart.html",
                    "pagePath": "guides/QuickStart.md"
                },
                {
                    "text": "基础组件",
                    "link": "guides/BasicComponents.html",
                    "pagePath": "guides/BasicComponents.md"
                },
                {
                    "text": "服务端渲染",
                    "link": "guides/ServerRendering.html",
                    "pagePath": "guides/ServerRendering.md"
                },
                {
                    "text": "代码拆分",
                    "link": "guides/CodeSplitting.html",
                    "pagePath": "guides/CodeSplitting.md"
                },
                {
                    "text": "滚动恢复",
                    "link": "guides/ScrollRestoration.html",
                    "pagePath": "guides/ScrollRestoration.md"
                },
                {
                    "text": "设计思想",
                    "link": "guides/Philosophy.html",
                    "pagePath": "guides/Philosophy.md"
                },
                {
                    "text": "测试",
                    "link": "guides/Testting.html",
                    "pagePath": "guides/Testting.md"
                },
                {
                    "text": "集成 Redux",
                    "link": "guides/ReduxIntegration.html",
                    "pagePath": "guides/ReduxIntegration.md"
                },
                {
                    "text": "静态路由",
                    "link": "guides/StaticRouter.html",
                    "pagePath": "guides/StaticRouter.md"
                }
            ],
            "pagePath": "guides/QuickStart.md"
        },
        {
            "text": "API",
            "link": "API/API.html",
            "pagePath": "API/API.md"
        }
    ]
};
