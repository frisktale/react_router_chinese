import projectConfig from '/react_router_chinese/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "guides/Testting.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "guides/Testting.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%B5%8B%E8%AF%95">测试<a class="anchor" href="#%E6%B5%8B%E8%AF%95">§</a></h2>\n<p>React Router依赖React上下文来工作。 这会影响您如何测试使用我们组件的组件。</p>\n<p>如果你对应用渲染的<Link>或者<Router>组件进行单元测试，那么你会得到一些有关上下文的错误和警告信息。虽然你可能会找出自己的路由上下文的内容，我们推荐你将你的单元测试包裹在<StaticRouter>或者<MemoryRouter>中。代码如下:</p>\n<pre class="language-autoit"><code class="language-autoit">class Sidebar extends Component {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span>{this<span class="token punctuation">.</span>toggleExpand}<span class="token operator">></span>\n          expand\n        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n        <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n          {users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>li<span class="token operator">></span>\n               <span class="token operator">&lt;</span>Link <span class="token keyword">to</span><span class="token operator">=</span>{user<span class="token punctuation">.</span>path}<span class="token operator">></span>\n                 {user<span class="token punctuation">.</span>name}\n               <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span>}\n        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span>\n  }\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> broken\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'it expands when the button is clicked\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Sidebar<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span>\n  <span class="token function">click</span><span class="token punctuation">(</span>theButton<span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>theThingToBeOpen<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> fixed!\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'it expands when the button is clicked\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>MemoryRouter<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Sidebar<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>MemoryRouter<span class="token operator">></span>\n  <span class="token punctuation">)</span>\n  <span class="token function">click</span><span class="token punctuation">(</span>theButton<span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>theThingToBeOpen<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%BB%8E%E7%89%B9%E5%AE%9A%E8%B7%AF%E7%94%B1%E5%BC%80%E5%A7%8B">从特定路由开始<a class="anchor" href="#%E4%BB%8E%E7%89%B9%E5%AE%9A%E8%B7%AF%E7%94%B1%E5%BC%80%E5%A7%8B">§</a></h3>\n<p>&lt; MemoryRouter &gt;支持initialEntries和initialIndex 属性。因此你可以从一个特定的路径来启动你的应用（或者是从应用的一小部分)。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"current user is active in sidebar"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>MemoryRouter initialEntries<span class="token operator">=</span>{<span class="token punctuation">[</span><span class="token string">"/users/2"</span><span class="token punctuation">]</span>}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Sidebar <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>MemoryRouter<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n  <span class="token function">expectUserToBeActive</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%AF%BC%E8%88%AA">导航<a class="anchor" href="#%E5%AF%BC%E8%88%AA">§</a></h3>\n<p>当路径改变时我们有许多路由测试的任务，因此你可能不需要再测试这个。但是如果你必须这样做的话，既然这发生在渲染时，那么我们可以这样做：</p>\n<pre class="language-autoit"><code class="language-autoit">import { render<span class="token punctuation">,</span> unmountComponentAtNode } from <span class="token string">"react-dom"</span><span class="token comment">;</span>\nimport React from <span class="token string">"react"</span><span class="token comment">;</span>\nimport { Route<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> MemoryRouter } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\nimport { Simulate } from <span class="token string">"react-addons-test-utils"</span><span class="token comment">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> a way <span class="token keyword">to</span> render any part of your app inside a MemoryRouter\n<span class="token operator">/</span><span class="token operator">/</span> you pass it a list of steps <span class="token keyword">to</span> execute when the location\n<span class="token operator">/</span><span class="token operator">/</span> changes<span class="token punctuation">,</span> it will call back <span class="token keyword">to</span> you <span class="token keyword">with</span> stuff like\n<span class="token operator">/</span><span class="token operator">/</span> `match` <span class="token operator">and</span> `location`<span class="token punctuation">,</span> <span class="token operator">and</span> `history` so you can control\n<span class="token operator">/</span><span class="token operator">/</span> the flow <span class="token operator">and</span> make assertions<span class="token punctuation">.</span>\n<span class="token keyword">const</span> renderTestSequence <span class="token operator">=</span> <span class="token punctuation">(</span>{\n  initialEntries<span class="token punctuation">,</span>\n  initialIndex<span class="token punctuation">,</span>\n  subject<span class="token punctuation">:</span> Subject<span class="token punctuation">,</span>\n  steps\n}<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n  class Assert extends React<span class="token punctuation">.</span>Component {\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      this<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n\n    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      this<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n\n    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      <span class="token keyword">const</span> nextStep <span class="token operator">=</span> steps<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextStep<span class="token punctuation">)</span> {\n        <span class="token function">nextStep</span><span class="token punctuation">(</span>{ <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>this<span class="token punctuation">.</span>props<span class="token punctuation">,</span> div }<span class="token punctuation">)</span><span class="token comment">;</span>\n      } <span class="token keyword">else</span> {\n        <span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token comment">;</span>\n      }\n    }\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      return this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token comment">;</span>\n    }\n  }\n\n  class Test extends React<span class="token punctuation">.</span>Component {\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      return <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>MemoryRouter\n          initialIndex<span class="token operator">=</span>{initialIndex}\n          initialEntries<span class="token operator">=</span>{initialEntries}\n        <span class="token operator">></span>\n          <span class="token operator">&lt;</span>Route\n            render<span class="token operator">=</span>{props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n              <span class="token operator">&lt;</span>Assert {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>props}<span class="token operator">></span>\n                <span class="token operator">&lt;</span>Subject <span class="token operator">/</span><span class="token operator">></span>\n              <span class="token operator">&lt;</span><span class="token operator">/</span>Assert<span class="token operator">></span>\n            <span class="token punctuation">)</span>}\n          <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>MemoryRouter<span class="token operator">></span>\n      <span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n  }\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token comment">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> our Subject<span class="token punctuation">,</span> the App<span class="token punctuation">,</span> but you can test any sub\n<span class="token operator">/</span><span class="token operator">/</span> section of your app too\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Route\n      exact\n      path<span class="token operator">=</span><span class="token string">"/"</span>\n      render<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token punctuation">)</span>}\n    <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>Route\n      path<span class="token operator">=</span><span class="token string">"/dashboard"</span>\n      render<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>h1<span class="token operator">></span>Dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Link <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/"</span> id<span class="token operator">=</span><span class="token string">"click-me"</span><span class="token operator">></span>\n            Home\n          <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token punctuation">)</span>}\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token comment">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> the actual test!\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"navigates around"</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">renderTestSequence</span><span class="token punctuation">(</span>{\n    <span class="token operator">/</span><span class="token operator">/</span> tell it the subject you\'re testing\n    subject<span class="token punctuation">:</span> App<span class="token punctuation">,</span>\n\n    <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">and</span> the steps <span class="token keyword">to</span> execute each time the location changes\n    steps<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">/</span><span class="token operator">/</span> initial render\n      <span class="token punctuation">(</span>{ history<span class="token punctuation">,</span> div }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        <span class="token operator">/</span><span class="token operator">/</span> assert the screen says what we think it should\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span>Welcome<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> now we can imperatively navigate as the test\n        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/dashboard"</span><span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">,</span>\n\n      <span class="token operator">/</span><span class="token operator">/</span> second render from new location\n      <span class="token punctuation">(</span>{ div }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span>Dashboard<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">or</span> we can simulate clicks on Links instead of\n        <span class="token operator">/</span><span class="token operator">/</span> using history<span class="token punctuation">.</span>push\n        Simulate<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#click-me"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> {\n          button<span class="token punctuation">:</span> <span class="token number">0</span>\n        }<span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">,</span>\n\n      <span class="token operator">/</span><span class="token operator">/</span> final render\n      <span class="token punctuation">(</span>{ location }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token operator">/</span><span class="token operator">/</span> you\'ll want something like `<span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` so your test\n        <span class="token operator">/</span><span class="token operator">/</span> fails <span class="token keyword">if</span> you never make it here<span class="token punctuation">.</span>\n        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n      }\n    <span class="token punctuation">]</span>\n  }<span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@17.0.2/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@17.0.2/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/react_router_chinese/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%B5%8B%E8%AF%95">测试<a class="anchor" href="#%E6%B5%8B%E8%AF%95">§</a></h2>\n<p>React Router依赖React上下文来工作。 这会影响您如何测试使用我们组件的组件。</p>\n<p>如果你对应用渲染的<Link>或者<Router>组件进行单元测试，那么你会得到一些有关上下文的错误和警告信息。虽然你可能会找出自己的路由上下文的内容，我们推荐你将你的单元测试包裹在<StaticRouter>或者<MemoryRouter>中。代码如下:</p>\n<pre class="language-autoit"><code class="language-autoit">class Sidebar extends Component {\n  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span>{this<span class="token punctuation">.</span>toggleExpand}<span class="token operator">></span>\n          expand\n        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n        <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n          {users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>li<span class="token operator">></span>\n               <span class="token operator">&lt;</span>Link <span class="token keyword">to</span><span class="token operator">=</span>{user<span class="token punctuation">.</span>path}<span class="token operator">></span>\n                 {user<span class="token punctuation">.</span>name}\n               <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span>}\n        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span>\n  }\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> broken\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'it expands when the button is clicked\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Sidebar<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span>\n  <span class="token function">click</span><span class="token punctuation">(</span>theButton<span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>theThingToBeOpen<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> fixed!\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'it expands when the button is clicked\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>MemoryRouter<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Sidebar<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>MemoryRouter<span class="token operator">></span>\n  <span class="token punctuation">)</span>\n  <span class="token function">click</span><span class="token punctuation">(</span>theButton<span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>theThingToBeOpen<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E4%BB%8E%E7%89%B9%E5%AE%9A%E8%B7%AF%E7%94%B1%E5%BC%80%E5%A7%8B">从特定路由开始<a class="anchor" href="#%E4%BB%8E%E7%89%B9%E5%AE%9A%E8%B7%AF%E7%94%B1%E5%BC%80%E5%A7%8B">§</a></h3>\n<p>&lt; MemoryRouter &gt;支持initialEntries和initialIndex 属性。因此你可以从一个特定的路径来启动你的应用（或者是从应用的一小部分)。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"current user is active in sidebar"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>MemoryRouter initialEntries<span class="token operator">=</span>{<span class="token punctuation">[</span><span class="token string">"/users/2"</span><span class="token punctuation">]</span>}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Sidebar <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>MemoryRouter<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment">;</span>\n  <span class="token function">expectUserToBeActive</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<h3 id="%E5%AF%BC%E8%88%AA">导航<a class="anchor" href="#%E5%AF%BC%E8%88%AA">§</a></h3>\n<p>当路径改变时我们有许多路由测试的任务，因此你可能不需要再测试这个。但是如果你必须这样做的话，既然这发生在渲染时，那么我们可以这样做：</p>\n<pre class="language-autoit"><code class="language-autoit">import { render<span class="token punctuation">,</span> unmountComponentAtNode } from <span class="token string">"react-dom"</span><span class="token comment">;</span>\nimport React from <span class="token string">"react"</span><span class="token comment">;</span>\nimport { Route<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> MemoryRouter } from <span class="token string">"react-router-dom"</span><span class="token comment">;</span>\nimport { Simulate } from <span class="token string">"react-addons-test-utils"</span><span class="token comment">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> a way <span class="token keyword">to</span> render any part of your app inside a MemoryRouter\n<span class="token operator">/</span><span class="token operator">/</span> you pass it a list of steps <span class="token keyword">to</span> execute when the location\n<span class="token operator">/</span><span class="token operator">/</span> changes<span class="token punctuation">,</span> it will call back <span class="token keyword">to</span> you <span class="token keyword">with</span> stuff like\n<span class="token operator">/</span><span class="token operator">/</span> `match` <span class="token operator">and</span> `location`<span class="token punctuation">,</span> <span class="token operator">and</span> `history` so you can control\n<span class="token operator">/</span><span class="token operator">/</span> the flow <span class="token operator">and</span> make assertions<span class="token punctuation">.</span>\n<span class="token keyword">const</span> renderTestSequence <span class="token operator">=</span> <span class="token punctuation">(</span>{\n  initialEntries<span class="token punctuation">,</span>\n  initialIndex<span class="token punctuation">,</span>\n  subject<span class="token punctuation">:</span> Subject<span class="token punctuation">,</span>\n  steps\n}<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n  class Assert extends React<span class="token punctuation">.</span>Component {\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      this<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n\n    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      this<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n\n    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      <span class="token keyword">const</span> nextStep <span class="token operator">=</span> steps<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextStep<span class="token punctuation">)</span> {\n        <span class="token function">nextStep</span><span class="token punctuation">(</span>{ <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>this<span class="token punctuation">.</span>props<span class="token punctuation">,</span> div }<span class="token punctuation">)</span><span class="token comment">;</span>\n      } <span class="token keyword">else</span> {\n        <span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token comment">;</span>\n      }\n    }\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      return this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token comment">;</span>\n    }\n  }\n\n  class Test extends React<span class="token punctuation">.</span>Component {\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n      return <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>MemoryRouter\n          initialIndex<span class="token operator">=</span>{initialIndex}\n          initialEntries<span class="token operator">=</span>{initialEntries}\n        <span class="token operator">></span>\n          <span class="token operator">&lt;</span>Route\n            render<span class="token operator">=</span>{props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n              <span class="token operator">&lt;</span>Assert {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>props}<span class="token operator">></span>\n                <span class="token operator">&lt;</span>Subject <span class="token operator">/</span><span class="token operator">></span>\n              <span class="token operator">&lt;</span><span class="token operator">/</span>Assert<span class="token operator">></span>\n            <span class="token punctuation">)</span>}\n          <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>MemoryRouter<span class="token operator">></span>\n      <span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n  }\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token comment">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> our Subject<span class="token punctuation">,</span> the App<span class="token punctuation">,</span> but you can test any sub\n<span class="token operator">/</span><span class="token operator">/</span> section of your app too\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Route\n      exact\n      path<span class="token operator">=</span><span class="token string">"/"</span>\n      render<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token punctuation">)</span>}\n    <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>Route\n      path<span class="token operator">=</span><span class="token string">"/dashboard"</span>\n      render<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>h1<span class="token operator">></span>Dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Link <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/"</span> id<span class="token operator">=</span><span class="token string">"click-me"</span><span class="token operator">></span>\n            Home\n          <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token punctuation">)</span>}\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token comment">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> the actual test!\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"navigates around"</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token function">renderTestSequence</span><span class="token punctuation">(</span>{\n    <span class="token operator">/</span><span class="token operator">/</span> tell it the subject you\'re testing\n    subject<span class="token punctuation">:</span> App<span class="token punctuation">,</span>\n\n    <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">and</span> the steps <span class="token keyword">to</span> execute each time the location changes\n    steps<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">/</span><span class="token operator">/</span> initial render\n      <span class="token punctuation">(</span>{ history<span class="token punctuation">,</span> div }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        <span class="token operator">/</span><span class="token operator">/</span> assert the screen says what we think it should\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span>Welcome<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> now we can imperatively navigate as the test\n        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/dashboard"</span><span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">,</span>\n\n      <span class="token operator">/</span><span class="token operator">/</span> second render from new location\n      <span class="token punctuation">(</span>{ div }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span>Dashboard<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">or</span> we can simulate clicks on Links instead of\n        <span class="token operator">/</span><span class="token operator">/</span> using history<span class="token punctuation">.</span>push\n        Simulate<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#click-me"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> {\n          button<span class="token punctuation">:</span> <span class="token number">0</span>\n        }<span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">,</span>\n\n      <span class="token operator">/</span><span class="token operator">/</span> final render\n      <span class="token punctuation">(</span>{ location }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token operator">/</span><span class="token operator">/</span> you\'ll want something like `<span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` so your test\n        <span class="token operator">/</span><span class="token operator">/</span> fails <span class="token keyword">if</span> you never make it here<span class="token punctuation">.</span>\n        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n      }\n    <span class="token punctuation">]</span>\n  }<span class="token punctuation">)</span><span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%B5%8B%E8%AF%95" }, "\u6D4B\u8BD5"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BB%8E%E7%89%B9%E5%AE%9A%E8%B7%AF%E7%94%B1%E5%BC%80%E5%A7%8B" }, "\u4ECE\u7279\u5B9A\u8DEF\u7531\u5F00\u59CB")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AF%BC%E8%88%AA" }, "\u5BFC\u822A")))))),
    'author': "Kanzaki-H-Aria",
    'contributors': [
        "Kanzaki-H-Aria"
    ],
    'date': "2019-06-05T03:45:34.000Z",
    'updated': "2019-06-05T03:46:30.000Z",
    'excerpt': "测试 React Router依赖React上下文来工作。 这会影响您如何测试使用我们组件的组件。 如果你对应用渲染的或者组件进行单元测试，那么你会得到一些有关上下文的错误和警告信息。虽然你可能会找出自己的路由上下文的内容，我们推...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "文档",
            "link": "guides/QuickStart.html",
            "children": [
                {
                    "text": "快速开始",
                    "link": "guides/QuickStart.html",
                    "pagePath": "guides/QuickStart.md"
                },
                {
                    "text": "基础组件",
                    "link": "guides/BasicComponents.html",
                    "pagePath": "guides/BasicComponents.md"
                },
                {
                    "text": "服务端渲染",
                    "link": "guides/ServerRendering.html",
                    "pagePath": "guides/ServerRendering.md"
                },
                {
                    "text": "代码拆分",
                    "link": "guides/CodeSplitting.html",
                    "pagePath": "guides/CodeSplitting.md"
                },
                {
                    "text": "滚动恢复",
                    "link": "guides/ScrollRestoration.html",
                    "pagePath": "guides/ScrollRestoration.md"
                },
                {
                    "text": "设计思想",
                    "link": "guides/Philosophy.html",
                    "pagePath": "guides/Philosophy.md"
                },
                {
                    "text": "测试",
                    "link": "guides/Testting.html",
                    "pagePath": "guides/Testting.md"
                },
                {
                    "text": "集成 Redux",
                    "link": "guides/ReduxIntegration.html",
                    "pagePath": "guides/ReduxIntegration.md"
                },
                {
                    "text": "静态路由",
                    "link": "guides/StaticRouter.html",
                    "pagePath": "guides/StaticRouter.md"
                }
            ],
            "pagePath": "guides/QuickStart.md"
        },
        {
            "text": "API",
            "link": "API/API.html",
            "pagePath": "API/API.md"
        }
    ]
};
